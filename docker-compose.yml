version: '2'
services:
  proxy:
    image: jkuo/nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /home/paulc/certs:/etc/nginx/certs
      - /home/paulc/vhost.d:/etc/nginx/vhost.d:ro
      - /usr/share/nginx/html
    networks:
      - front-end

  letsencrypt:
    image: alastaircoote/docker-letsencrypt-nginx-proxy-companion
    restart: always
    volumes_from:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /home/paulc/certs:/etc/nginx/certs:rw
      - /home/paulc/vhost.d:/etc/nginx/vhost.d:rw

  web:
    image: bst
    restart: always
    depends_on:
      - mysql
      - proxy
      - session_store
    environment:
      - VIRTUAL_HOST=$BST_VIRTUAL_HOST
      - VIRTUAL_PORT
      - RAILS_ENV
      - RACK_ENV
      - BST_SECRET_KEY_BASE
      - BST_MYSQL_USERNAME
      - BST_MYSQL_PASSWORD
      - LETSENCRYPT_HOST=$BST_VIRTUAL_HOST
      - LETSENCRYPT_EMAIL$BST_LETSENCRYPT_EMAIL
    ports:
      - "3000"
    command: bundle exec puma -C config/puma.rb
    networks:
      - front-end
      - back-end
  # Development tip: uncomment the following 2 lines. This share mounts the rails directory into the container so we don't have to rebuild the image
  # after every change.
  #  volumes:
  #    - .:/app/
  # However, in production, it will cause problems scaling multiple web containers because the tmp/pids directory is shared.

  session_store:
    image: memcached
    restart: always
    ports:
      - "11211:11211"
    environment:
      - CACHESIZE=10
    networks:
      - back-end

  log_manager:
    image: gliderlabs/logspout
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    command: syslog://${PAPERTRAIL_DEST}
    networks:
      - back-end


  mysql:
    image: mysql 
    restart: always
    environment:
      -  MYSQL_ROOT_PASSWORD=root
    ports:
      - 3306:3306
    networks:
      - back-end

networks:
  front-end:
    driver: bridge
  back-end:
    driver: bridge
